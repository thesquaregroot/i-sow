#!/bin/bash

KNOWN_TORRENTS_FILE="$HOME/.known_torrents"

URL="$1"    # required, download URL
MATCH="$2"  # optional, segement of desired torrent URL if multiple exists, if not set, first is selected

function selectUri() {
    # use the first match
    grep "$MATCH" | head -n 1
}

# check for magnet links
torrent_uri="$(lynx -dump -listonly -hiddenlinks=listonly $URL | grep magnet | awk '{print $2}' | selectUri)"
torrent_id="$torrent_uri"
torrent_file="$torrent_uri"

if [ -z "$torrent_uri" ]; then
    # check for .torrent download links
    echo "No magnet links found, searching for .torrent links..."
    torrent_uri="$(lynx -dump -listonly -hiddenlinks=listonly $URL | grep ".torrent$" | awk '{print $2}' | selectUri)"
    if [ -n "$torrent_uri" ]; then
        torrent_file="$(mktemp --suffix .torrent)"
        curl -sSLf "$torrent_uri" -o $torrent_file
        if [ $? -ne 0 ]; then
            >&2 echo "ERROR: Problem downloading torrent file: $torrent_uri"
            exit 1
        fi
        torrent_id="torrent_file:$(shasum -a 256 "$torrent_file" | awk '{print $1}')"
    fi
fi

if [ -z "$torrent_uri" ]; then
    >&2 echo "ERROR: No torrents found at $URL"
    exit 1
fi

if [ -f "$KNOWN_TORRENTS_FILE" ] && grep -xq "$torrent_id" $KNOWN_TORRENTS_FILE; then
    echo "Torrent previously downloaded: $torrent_uri"
    exit 0
else
    echo "Selected torrent: $torrent_uri"
fi

xdg-open "$torrent_file" && [ -f "$torrent_file" ] && rm $torrent_file

# update known torrents file
echo "$torrent_id" >> $KNOWN_TORRENTS_FILE
sort -u -o $KNOWN_TORRENTS_FILE $KNOWN_TORRENTS_FILE

