#!/bin/bash

SAVE_TO=""
MATCH=""
DEBUG=false

function printUsage() {
    >&2 echo "Usage: $0 [OPTION] url"
    >&2 echo
    >&2 echo "    -d, --debug               Enable debug logging"
    >&2 echo "    -h, --help                Display this help text"
    >&2 echo "    -s, --save-to path        Save torrent file to specified path instead of trying to open it"
    >&2 echo "    -m, --match value         Search HTML for links containing the provided substring value"
    >&2 echo
}

ARGS=""

while (( "$#" )); do
    case "$1" in
    -d|--debug)
        DEBUG=true
        shift
        ;;
    -h|--help)
        printUsage
        exit 1
        ;;
    -s|--save-to)
        if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
            SAVE_TO="$2"
            shift 2
        else
            >&2 echo "Error: Argument for $1 is missing"
            exit 1
        fi
        ;;
    -m|--match)
        if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
            MATCH="$2"
            shift 2
        else
            >&2 echo "Error: Argument for $1 is missing"
            exit 1
        fi
        ;;
    -*|--*=)
        # unsupported flags
        >&2 echo "Error: Unsupported flag $1"
        >&2 echo
        printUsage
        exit 1
        ;;
    *)
        # preserve non-option arguments
        ARGS="$ARGS $1"
        shift
        ;;
    esac
done

eval set -- "$ARGS"

if [ $# -ne 1 ]; then
    >&2 echo "Error: exactly one URL must be specified."
    >&2 echo
    printUsage
    exit 1
fi

URL="$1"

KNOWN_TORRENTS_FILE="$HOME/.known_torrents"

function selectUri() {
    # use the first match
    grep "$MATCH" | head -n 1
}

if [ -z "$SAVE_TO" ]; then
    if $DEBUG; then
        echo "Checking for magnet links..."
    fi
    torrent_uri="$(lynx -dump -listonly -hiddenlinks=listonly $URL | awk '{print $2}' | grep "^magnet:" | selectUri)"
    torrent_id="$torrent_uri"
    torrent_file="$torrent_uri"
    if $DEBUG && [ -z "$torrent_uri" ]; then
        echo "No magnet links found."
    fi
fi

if [ -z "$torrent_uri" ]; then
    # check for .torrent download links
    if $DEBUG; then
        echo "Checking for .torrent and /torrent/ links..."
    fi
    torrent_uri="$(lynx -dump -listonly -hiddenlinks=listonly $URL | awk '{print $2}' | grep ".torrent$\|/torrent/$" | selectUri)"
    if [ -n "$torrent_uri" ]; then
        torrent_file="$(mktemp --suffix .torrent)"
        if $DEBUG; then
            CURL_ARGS="-Lf"
        else
            CURL_ARGS="-sSLf"
        fi
        curl $CURL_ARGS "$torrent_uri" -o $torrent_file
        if [ $? -ne 0 ]; then
            >&2 echo "ERROR: Problem downloading torrent file: $torrent_uri"
            exit 1
        fi
        torrent_id="torrent_file:$(sha256sum "$torrent_file" | awk '{print $1}')"
    else
        if $DEBUG; then
            echo "No torrent links found."
        fi
    fi
fi

if [ -z "$torrent_uri" ]; then
    >&2 echo "ERROR: No torrents found at $URL"
    exit 1
fi

if [ -f "$KNOWN_TORRENTS_FILE" ] && grep -xq "$torrent_id" $KNOWN_TORRENTS_FILE; then
    echo "Torrent previously downloaded: $torrent_uri"
    exit 0
else
    if $DEBUG; then
        echo "Selected torrent: $torrent_uri"
    fi
fi

if [ -z $SAVE_TO ]; then
    xdg-open "$torrent_file" && [ -f "$torrent_file" ] && rm $torrent_file
else
    mv $torrent_file $SAVE_TO
fi

# update known torrents file
if $DEBUG; then
    echo "Updating $KNOWN_TORRENTS_FILE"
fi
echo "$torrent_id" >> $KNOWN_TORRENTS_FILE
sort -u -o $KNOWN_TORRENTS_FILE $KNOWN_TORRENTS_FILE

